/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import dbconn.ConexionBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author eabr1
 */
public class UsuariosTipos extends javax.swing.JFrame  {

    /**
     * Creates new form UsuariosTipos2
     */
    public UsuariosTipos() {
        initComponents();
        llenarComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cbTipo = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Tipos de usuarios");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Agregar:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Eliminar:");

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(cbTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(btnEliminar))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String nombreUsuario = txtUsuario.getText();
        
        if(nombreUsuario == null || nombreUsuario.length() == 0){
            JOptionPane.showMessageDialog(UsuariosTipos.this, "El campo Usuario no puede estar vacio.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{

            try {
                // Obtener una conexión de la base de datos
                Connection conexion = ConexionBD.obtenerConexion();

                // Consulta SQL para verificar el inicio de sesión
                String consulta = "IF NOT EXISTS (SELECT TOP 1 1 FROM iso610.UsuarioTipo WHERE Descripcion = ? ) BEGIN INSERT INTO iso610.UsuarioTipo (Descripcion) VALUES (?) END";
                PreparedStatement preparedStatement = conexion.prepareStatement(consulta);
                preparedStatement.setString(1, nombreUsuario);                
                preparedStatement.setString(2, nombreUsuario);



                int filasInsertadas = preparedStatement.executeUpdate();
                
                JOptionPane.showMessageDialog(UsuariosTipos.this, "Usuario agregado correctamente.", "Completado", JOptionPane.INFORMATION_MESSAGE);
                limpiarCombobox();
                llenarComboBox();
                txtUsuario.setText("");
                // Cerrar recursos
                preparedStatement.close();
                ConexionBD.cerrarConexion(conexion);
                
                
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int selectedIndex = cbTipo.getSelectedIndex();

        if(selectedIndex == -1){
            JOptionPane.showMessageDialog(UsuariosTipos.this, "Debe seleccionar un elemento.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        //        else if(contrasenaUsuario == null || contrasenaUsuario.length() == 0){
            //            JOptionPane.showMessageDialog(UsuariosTipos.this, "El campo Clave no puede estar vacio.", "Error", JOptionPane.ERROR_MESSAGE);
            //        }
        //
        //        else if(contrasenaUsuario2 == null || contrasenaUsuario2.length() == 0){
            //            JOptionPane.showMessageDialog(UsuariosTipos.this, "El campo Confirmar no puede estar vacio.", "Error", JOptionPane.ERROR_MESSAGE);
            //        }
        //
        //        else if(!contrasenaUsuario.equals(contrasenaUsuario2)){
            //            JOptionPane.showMessageDialog(UsuariosTipos.this, "Las claves no coinciden.", "Error", JOptionPane.ERROR_MESSAGE);
            //        }
        else{
            Object selectedItem = cbTipo.getSelectedItem();

            String nombreUsuario = selectedItem.toString();
            try {
                // Obtener una conexión de la base de datos
                Connection conexion = ConexionBD.obtenerConexion();

                // Consulta SQL para verificar el inicio de sesión
                String consulta = "DELETE FROM ISO610.UsuarioTipo Where descripcion = ?";
                PreparedStatement preparedStatement = conexion.prepareStatement(consulta);
                preparedStatement.setString(1, nombreUsuario);

                int filasInsertadas = preparedStatement.executeUpdate();

                JOptionPane.showMessageDialog(UsuariosTipos.this, "Usuario eliminado correctamente.", "Completado", JOptionPane.INFORMATION_MESSAGE);
                limpiarCombobox();
                llenarComboBox();

                // Cerrar recursos
                preparedStatement.close();
                ConexionBD.cerrarConexion(conexion);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed
    private void llenarComboBox() {
        ArrayList<String> elementos = new ArrayList<>();
        try {
            
            Connection conexion = ConexionBD.obtenerConexion();

            // Crear y ejecutar la consulta SQL para obtener id y descripción
            String consultaSQL = "SELECT DESCRIPCION FROM [dbApec].[iso610].UsuarioTipo";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);
            ResultSet resultSet = statement.executeQuery();

            // Crear objetos ComboBoxItem y agregarlos al JComboBox
            while (resultSet.next()) {
                String elemento = resultSet.getString("DESCRIPCION");
                elementos.add(elemento);
            }

            // Cerrar la conexión y los recursos
            resultSet.close();
            statement.close();
            conexion.close();
            
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(elementos.toArray(new String[0]));
            cbTipo.setModel(model);
            cbTipo.setSelectedIndex(-1);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void limpiarCombobox() {
        cbTipo.removeAllItems();

    }
    class ComboBoxItem {
        private int id;
        private String descripcion;

        public ComboBoxItem(int id, String descripcion) {
            this.id = id;
            this.descripcion = descripcion;
        }

        public int getId() {
            return id;
        }

        @Override
        public String toString() {
            return descripcion;
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
